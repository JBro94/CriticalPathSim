# -*- coding: utf-8 -*-
"""CriticalPathSimulation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tfpV7LpT2f0hLg4nYUscoQDzWt44hkkk
"""

import numpy as np
import matplotlib.pyplot as plt

triangularSample = np.random.triangular(2, 7, 11, size=1000000)
plt.hist(triangularSample, bins=200, density=True)
plt.show()

import tensorflow_probability as tfp
tfd = tfp.distributions

dist = tfd.PERT(low=1., peak=7., high=11., temperature=4.)
print(dist.sample(20))

print(dist.prob(7.))

import seaborn as sns

Opt = 4
Ml = 7
Pess = 14

plt.figsize=(5,5)
for Temp in range(5,8):
  dist = tfd.PERT(low=Opt, peak=Ml, high=Pess, temperature=Temp)
  estimates = dist.sample(2000)
  ax = sns.distplot(estimates)

ax.legend(range(5,8))
plt.show()

import pandas as pd

taskNames = ['T1', 'T2', 'T3']
taskOpt=[]
taskPess=[]
taskMl=[]

tasks = pd.DataFrame(columns=taskNames)
for task in tasks.columns:
  dis = tfd.PERT(low=4, peak=7, high=11, temperature=4)
  tasks[task] = dist.sample(1000)
print(tasks)
tasks.to_csv('/content/drive/My Drive/IT 496/tasks.csv', index=False, header=taskNames)

"""# New Section"""

import pandas as pd
import seaborn as sns
import numpy as np
import matplotlib.pyplot as plt
import tensorflow_probability as tfp
tfd = tfp.distributions

simulationData = pd.read_csv("/content/drive/MyDrive/IT 496/PERT-CPM.csv")

taskIDs = simulationData['tasks']
Opt_dur = simulationData['ai ']
ml_dur = simulationData['mi']
pess_dur = simulationData['bi']
simulatedTasks = pd.DataFrame(columns=taskIDs)

for task in simulatedTasks.columns:
  dis = tfd.PERT(low=Opt_dur, peak=ml_dur, high=pess_dur, temperature=Opt_dur)
  simulatedTasks[task] = dist.sample(100000)
print(simulatedTasks)

simulatedTasks.to_csv('/content/drive/MyDrive/IT 496/simulatedData.csv', index=False)

projectDurationData = pd.read_csv('/content/drive/MyDrive/IT 496/simulatedData.csv')
#print(projectDurationData)

# print(projectDurationData['A'])
# print(projectDurationData['D'])
# print(projectDurationData['E'])
# print(projectDurationData['J'])

pathADEJ = []
pathBCDEJ = []
pathBI = []
pathBCFHJ = []
pathBCFGJ = []
avgPathDuration = 0

def calcPathDuration1(chosenPath, startingPoint, endingPoint):
  for i in range(100000):
    chosenPath.append(startingPoint[i] + endingPoint[i])
  return chosenPath

def calcPathDuration2(chosenPath, startingPoint, endingPoint, point1, point2):
  for i in range(100000):
    chosenPath.append(startingPoint[i] + point1[i] + point2[i] + endingPoint[i])
  return chosenPath

def calcPathDuration3(chosenPath, startingPoint, endingPoint, point1, point2, point3):
  for i in range(len(projectDurationData['A'])):
    chosenPath.append(startingPoint[i] + point1[i] + point2[i] + point3[i] + endingPoint[i])
  return chosenPath

path1 = calcPathDuration3(pathBCDEJ, projectDurationData['B'], projectDurationData['J'], projectDurationData['C'], projectDurationData['D'], projectDurationData['E'])
path2 = calcPathDuration3(pathBCFHJ, projectDurationData['B'], projectDurationData['J'], projectDurationData['C'], projectDurationData['F'], projectDurationData['H'])
path3 = calcPathDuration3(pathBCFGJ, projectDurationData['B'], projectDurationData['J'], projectDurationData['C'], projectDurationData['F'], projectDurationData['G'])
path4 = calcPathDuration2(pathADEJ, projectDurationData['A'], projectDurationData['J'], projectDurationData['D'], projectDurationData['E'])
path5 = calcPathDuration1(pathBI, projectDurationData['B'], projectDurationData['I'])

pathDurationDF = pd.DataFrame(columns=['BCDEJ', 'BCFHJ', 'BCFGJ', 'ADEJ', 'BI'])

pathDurationDF['BCDEJ'] = path1

pathDurationDF['BCFHJ'] = path2

pathDurationDF['BCFGJ'] = path3

pathDurationDF['ADEJ'] = path4

pathDurationDF['BI'] = path5

print(pathDurationDF)

BCDEJ_count = 0
BCFHJ_count = 0
BCFGJ_count = 0
ADEJ_count = 0
BI_count = 0


criticalPath = pathDurationDF.idxmax(axis = 1)

for i in range(len(criticalPath)):
  if(criticalPath[i] == 'BCDEJ'):
    BCDEJ_count += 1
  elif criticalPath[i] == 'BCFHJ':
    BCFHJ_count += 1
  elif criticalPath[i] == 'BCFGJ':
    BCFGJ_count += 1
  elif criticalPath[i] == 'ADEJ':
    ADEJ_count += 1
  else:
    BI_count += 1


print(BCDEJ_count)
print(BCFHJ_count)
print(BCFGJ_count)
print(ADEJ_count)
print(BI_count)

AssessmentDF = pd.DataFrame(columns = ['Path', 'No_CriticalPath', 'Percent_CriticalPath'])

AssessmentDF['Path'] = ['BCDEJ', 'BCFHJ', 'BCFGJ', 'ADEJ', 'BI']
AssessmentDF['No_CriticalPath'] = [BCDEJ_count, BCFHJ_count, BCFGJ_count, ADEJ_count, BI_count]
AssessmentDF['Percent_CriticalPath'] = [(BCDEJ_count/100000)*100, (BCFHJ_count/100000)*100, (BCFGJ_count/100000)*100, (ADEJ_count/100000)*100, (BI_count/100000)*100]

print(AssessmentDF)

AssessmentDF.plot.bar(rot=0, x='Path', y='Percent_Critica')